generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id        Int          @id @default(autoincrement())
  name      String
  email     String       @unique
  createdAt DateTime     @default(now())
  tests     ManualTest[]
}

model Project {
  id          Int       @id @default(autoincrement())
  name        String
  code        String    @unique
  status      String
  createdAt   DateTime  @default(now())
  description String?
  versions    Version[]
}

model Version {
  id            Int            @id @default(autoincrement())
  name          String
  createdAt     DateTime       @default(now())
  projectId     Int
  features      Feature[]
  installations Installation[]
  project       Project        @relation(fields: [projectId], references: [id])

  @@unique([projectId, name])
}

model Customer {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  installations Installation[]
}

model Installation {
  id               Int      @id @default(autoincrement())
  customerId       Int
  versionId        Int
  installationDate DateTime
  createdAt        DateTime @default(now())
  customer         Customer @relation(fields: [customerId], references: [id])
  version          Version  @relation(fields: [versionId], references: [id])

  @@unique([customerId, versionId])
}

model Feature {
  id           Int           @id @default(autoincrement())
  name         String
  description  String
  versionId    Int
  version      Version       @relation(fields: [versionId], references: [id])
  requirements Requirement[]

  @@unique([name, versionId])
}

model Requirement {
  id          Int        @id @default(autoincrement())
  name        String
  description String
  status      String
  priority    String
  featureId   Int
  feature     Feature    @relation(fields: [featureId], references: [id])
  scenarios   Scenario[]
  coverage    Int        @default(0)

  @@unique([description, featureId])
}

model Scenario {
  id             Int             @id @default(autoincrement())
  name           String
  scenario       String
  requirementId  Int
  testStatus     String?         @db.VarChar(10)
  manualTest     ManualTest?
  requirement    Requirement     @relation(fields: [requirementId], references: [id])
  automaticTests AutomaticTest[] @relation("AutomaticTestToScenario")

  @@unique([name, requirementId])
}

model ManualTest {
  id            Int      @id @default(autoincrement())
  status        String
  ownerId       Int
  scenarioId    Int      @unique
  notes         String?
  executionDate DateTime
  owner         User     @relation(fields: [ownerId], references: [id])
  scenario      Scenario @relation(fields: [scenarioId], references: [id])
}

model AutomaticTest {
  id            Int        @id @default(autoincrement())
  name          String
  status        String
  executionDate DateTime
  notes         String?
  scenarios     Scenario[] @relation("AutomaticTestToScenario")
}
