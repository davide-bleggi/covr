generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int            @id @default(autoincrement())
  name                 String
  email                String         @unique
  password             String
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @default(now()) @updatedAt
  tests                ManualTest[]
  createdProjects      Project[]      @relation("CreatedProjects")
  updatedProjects      Project[]      @relation("UpdatedProjects")
  createdVersions      Version[]      @relation("CreatedVersions")
  updatedVersions      Version[]      @relation("UpdatedVersions")
  createdInstallations Installation[] @relation("CreatedInstallations")
  updatedInstallations Installation[] @relation("UpdatedInstallations")
  createdRequirements  Requirement[]  @relation("CreatedRequirements")
  updatedRequirements  Requirement[]  @relation("UpdatedRequirements")
  createdFeatures      Feature[]      @relation("CreatedFeatures")
  updatedFeatures      Feature[]      @relation("UpdatedFeatures")
  createdManualTest    ManualTest[]   @relation("CreatedManualTests")
  updatedManualTest    ManualTest[]   @relation("UpdatedManualTests")
  createdScenario      Scenario[]     @relation("CreatedScenarios")
  updatedScenario      Scenario[]     @relation("UpdatedScenarios")
}

model Project {
  id            Int       @id @default(autoincrement())
  name          String
  code          String    @unique
  status        String
  createdAt     DateTime  @default(now())
  description   String?
  versions      Version[]
  createdByUser User      @relation("CreatedProjects", fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  updatedByUser User      @relation("UpdatedProjects", fields: [updatedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdBy     Int       @default(1)
  updatedBy     Int       @default(1)
  coverage      Int       @default(0)
}

model Version {
  id            Int            @id @default(autoincrement())
  name          String
  createdAt     DateTime       @default(now())
  projectId     Int
  prevVersionId Int? // Make prevId nullable (optional) if needed
  features      Feature[]
  installations Installation[]
  project       Project        @relation(fields: [projectId], references: [id])
  createdByUser User           @relation("CreatedVersions", fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  updatedByUser User           @relation("UpdatedVersions", fields: [updatedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdBy     Int            @default(1)
  updatedBy     Int            @default(1)
  prevVersion   Version?       @relation("VersionToVersion", fields: [prevVersionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  nextVersions  Version[]      @relation("VersionToVersion") // Back-relation field

  @@unique([projectId, name])
}

model Customer {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  installations Installation[]
}

model Installation {
  id               Int      @id @default(autoincrement())
  customerId       Int
  versionId        Int
  installationDate DateTime
  createdAt        DateTime @default(now())
  customer         Customer @relation(fields: [customerId], references: [id])
  version          Version  @relation(fields: [versionId], references: [id])
  createdByUser    User     @relation("CreatedInstallations", fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  updatedByUser    User     @relation("UpdatedInstallations", fields: [updatedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdBy        Int      @default(1)
  updatedBy        Int      @default(1)

  @@unique([customerId, versionId])
}

model Feature {
  id            Int           @id @default(autoincrement())
  name          String
  description   String
  versionId     Int
  version       Version       @relation(fields: [versionId], references: [id])
  requirements  Requirement[]
  createdByUser User          @relation("CreatedFeatures", fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  updatedByUser User          @relation("UpdatedFeatures", fields: [updatedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdBy     Int           @default(1)
  updatedBy     Int           @default(1)
  coverage      Int           @default(0)

  @@unique([name, versionId])
}

model Requirement {
  id            Int        @id @default(autoincrement())
  name          String
  description   String
  status        String
  priority      String
  featureId     Int
  feature       Feature    @relation(fields: [featureId], references: [id])
  scenarios     Scenario[]
  coverage      Int        @default(0)
  createdByUser User       @relation("CreatedRequirements", fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  updatedByUser User       @relation("UpdatedRequirements", fields: [updatedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdBy     Int        @default(1)
  updatedBy     Int        @default(1)

  @@unique([description, featureId])
}

model Scenario {
  id             Int             @id @default(autoincrement())
  name           String
  scenario       String
  requirementId  Int
  testStatus     String?         @db.VarChar(10)
  manualTest     ManualTest?
  requirement    Requirement     @relation(fields: [requirementId], references: [id])
  automaticTests AutomaticTest[] @relation("AutomaticTestToScenario")
  createdByUser  User            @relation("CreatedScenarios", fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  updatedByUser  User            @relation("UpdatedScenarios", fields: [updatedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdBy      Int             @default(1)
  updatedBy      Int             @default(1)

  @@unique([name, requirementId])
}

model ManualTest {
  id            Int      @id @default(autoincrement())
  status        String
  ownerId       Int
  scenarioId    Int      @unique
  notes         String?
  executionDate DateTime
  owner         User     @relation(fields: [ownerId], references: [id])
  scenario      Scenario @relation(fields: [scenarioId], references: [id])
  createdByUser User     @relation("CreatedManualTests", fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  updatedByUser User     @relation("UpdatedManualTests", fields: [updatedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdBy     Int      @default(1)
  updatedBy     Int      @default(1)
}

model AutomaticTest {
  id            Int        @id @default(autoincrement())
  name          String
  status        String
  executionDate DateTime
  notes         String?
  scenarios     Scenario[] @relation("AutomaticTestToScenario")
}
